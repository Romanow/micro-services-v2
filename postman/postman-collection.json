{
	"info": {
		"_postman_id": "5a340b2c-320b-4ecd-af4f-a3289505187b",
		"name": "[rsoi] Authorization",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[keycloak] Get token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate token\", () => {",
							"    pm.response.to.have.status(200)",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"    ",
							"    const response = pm.response.json();",
							"    pm.collectionVariables.set(\"authorizationToken\", response.access_token)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "store-service",
							"type": "string"
						},
						{
							"key": "password",
							"value": "81ecb5e5-c132-4c33-ad84-dde95995d4ab",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "scope",
							"value": "openid email profile",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "username",
							"value": "ronin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "test",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/auth/realms/services-realm/protocol/openid-connect/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"realms",
						"services-realm",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "[store] Purchase item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Purchase item\", function() {",
							"    pm.response.to.have.status(201)",
							"    var location = pm.response.headers.get(\"Location\")",
							"    pm.expect(location).to.not.empty;",
							"    var orderUid = location.split(\"/\").pop()",
							"    pm.environment.set(\"orderUid\", orderUid)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authorizationToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"model\": \"Lego 8880\",\n    \"size\": \"L\"\n}"
				},
				"url": {
					"raw": "{{storeUrl}}/{{apiPath}}/store/purchase",
					"host": [
						"{{storeUrl}}"
					],
					"path": [
						"{{apiPath}}",
						"store",
						"purchase"
					]
				}
			},
			"response": []
		},
		{
			"name": "[store] User orders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User orders\", function() {",
							"    pm.response.to.have.status(200)",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"    ",
							"    const response = pm.response.json();",
							"    pm.expect(response.length).to.greaterThan(0)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authorizationToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{storeUrl}}/{{apiPath}}/store/orders",
					"host": [
						"{{storeUrl}}"
					],
					"path": [
						"{{apiPath}}",
						"store",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "[store] User order info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User order info\", function() {",
							"    pm.response.to.have.status(200)",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"    ",
							"    const response = pm.response.json();",
							"    const orderUid = pm.variables.get(\"orderUid\")",
							"    ",
							"    pm.expect(response.orderUid).to.eq(orderUid)",
							"    pm.expect(response.date).to.not.empty",
							"    pm.expect(response.model).to.eq(\"Lego 8880\")",
							"    pm.expect(response.size).to.eq(\"L\")",
							"    pm.expect(response.warrantyDate).to.not.empty",
							"    pm.expect(response.warrantyStatus).to.eq(\"ON_WARRANTY\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authorizationToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{storeUrl}}/{{apiPath}}/store/{{orderUid}}",
					"host": [
						"{{storeUrl}}"
					],
					"path": [
						"{{apiPath}}",
						"store",
						"{{orderUid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[store] Warranty request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Warranty request\", function() {",
							"    pm.response.to.have.status(200)",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"    ",
							"    const response = pm.response.json();",
							"    const orderUid = pm.variables.get(\"orderUid\")",
							"    ",
							"    pm.expect(response.orderUid).to.eq(orderUid)",
							"    pm.expect(response.warrantyDate).to.not.empty",
							"    pm.expect(response.decision).to.eq(\"RETURN\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authorizationToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"reason\": \"It drowned\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{storeUrl}}/{{apiPath}}/store/{{orderUid}}/warranty",
					"host": [
						"{{storeUrl}}"
					],
					"path": [
						"{{apiPath}}",
						"store",
						"{{orderUid}}",
						"warranty"
					]
				}
			},
			"response": []
		},
		{
			"name": "[store] Return order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Return order\", function() {",
							"    pm.response.to.have.status(204)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authorizationToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{storeUrl}}/{{apiPath}}/store/{{orderUid}}/refund",
					"host": [
						"{{storeUrl}}"
					],
					"path": [
						"{{apiPath}}",
						"store",
						"{{orderUid}}",
						"refund"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "authorizationToken",
			"value": ""
		}
	]
}