{
	"info": {
		"_postman_id": "f4e7fbec-3189-4058-a115-c7b4b5c9a7b7",
		"name": "Services",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Warranty Service",
			"item": [
				{
					"name": "[warranty] Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a9a7b65-f26e-457b-bbd4-9e5d92ee54e6",
								"exec": [
									"pm.test(\"Health check\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "passwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "management",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{warrantyUrl}}/manage/health",
							"host": [
								"{{warrantyUrl}}"
							],
							"path": [
								"manage",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "[warranty] Start warranty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d77c3b77-4bfb-49c5-bdf3-f9897fbfb8b2",
								"exec": [
									"var uuid = require(\"uuid\");",
									"postman.setEnvironmentVariable(\"itemUid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcb1d080-35de-45de-83a4-1e02a65892af",
								"exec": [
									"pm.test(\"Start warranty\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{warrantyUrl}}/{{apiPath}}/warranty/{{itemUid}}",
							"host": [
								"{{warrantyUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warranty",
								"{{itemUid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[warranty] Warranty status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90f679df-2043-442b-9800-5a7ee934b91a",
								"exec": [
									"pm.test(\"Warranty status\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    const itemUid = pm.variables.get(\"itemUid\")",
									"    pm.expect(response.itemUid).to.eq(itemUid)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{warrantyUrl}}/{{apiPath}}/warranty/{{itemUid}}",
							"host": [
								"{{warrantyUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warranty",
								"{{itemUid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[warranty] Request for warranty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "098f14ec-54ac-46e9-9b66-96512d5b0373",
								"exec": [
									"pm.test(\"Request for warranty\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    pm.expect(response.decision).to.eq(\"RETURN\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"It drowned\",\n    \"availableCount\": 2\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{warrantyUrl}}/{{apiPath}}/warranty/{{itemUid}}/warranty",
							"host": [
								"{{warrantyUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warranty",
								"{{itemUid}}",
								"warranty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[warranty] Stop warranty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887a344b-5e5f-4ac3-b51f-013e543470d9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "22df8818-9d19-43a2-8e7a-b65fae4969be",
								"exec": [
									"pm.test(\"Stop warranty\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{warrantyUrl}}/{{apiPath}}/warranty/{{itemUid}}",
							"host": [
								"{{warrantyUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warranty",
								"{{itemUid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Warehouse Service",
			"item": [
				{
					"name": "[warehouse] Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c21c0c15-6a30-419a-95bd-50f1516e5bc1",
								"exec": [
									"pm.test(\"Health check\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "passwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "management",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{warehouseUrl}}/manage/health",
							"host": [
								"{{warehouseUrl}}"
							],
							"path": [
								"manage",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "[warehouse] Take item from Warehouse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e985b15f-cb69-457c-aa90-0e9ee5fe56c7",
								"exec": [
									"pm.test(\"Take item from Warehouse\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    const orderUid = pm.variables.get(\"orderUid\")",
									"    pm.expect(response.orderItemUid).to.exist",
									"    pm.expect(response.orderUid).to.eq(orderUid)",
									"    pm.expect(response.model).to.eq(\"Lego 8880\")",
									"    pm.expect(response.size).to.eq(\"L\")",
									"",
									"    pm.environment.set(\"orderItemUid\", response.orderItemUid)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f75e35cc-81c5-42e9-b745-27fbc06b7e3a",
								"exec": [
									"var uuid = require(\"uuid\");",
									"postman.setEnvironmentVariable(\"orderUid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderUid\": \"{{orderUid}}\",\n    \"model\": \"Lego 8880\",\n    \"size\": \"L\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{warehouseUrl}}/{{apiPath}}/warehouse/",
							"host": [
								"{{warehouseUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warehouse",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[warehouse] Get item info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "507b8f84-1f0a-453a-97f6-e5095457ce40",
								"exec": [
									"pm.test(\"Get item info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    pm.expect(response.model).to.eq(\"Lego 8880\")",
									"    pm.expect(response.size).to.eq(\"L\")",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51d7fb7a-fbff-4128-b8d3-20ae12ecf29f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderUid\": \"{{orderUid}}\",\n    \"model\": \"Lego 8880\",\n    \"size\": \"L\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{warehouseUrl}}/{{apiPath}}/warehouse/{{orderItemUid}}",
							"host": [
								"{{warehouseUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warehouse",
								"{{orderItemUid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[warehouse] Warranty Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e14d4c-8f99-4b00-859d-2f6dd844dcc5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee5c29b0-d5ee-4535-a3a1-f04f5897966d",
								"exec": [
									"pm.test(\"Warranty request\", function() {",
									"    pm.response.to.have.status(404)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    const orderItemUid = pm.variables.get(\"orderItemUid\")",
									"    pm.expect(response.message).to.eq(\"Warranty not found for itemUid '\" + orderItemUid + \"'\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"It drowned\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{warehouseUrl}}/{{apiPath}}/warehouse/{{orderItemUid}}/warranty",
							"host": [
								"{{warehouseUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warehouse",
								"{{orderItemUid}}",
								"warranty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[warehouse] Return item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d905dc9f-7c27-4fe2-9895-7e366d3ac0ad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a123f1ae-3d1b-4423-96be-4f2c3b13b7af",
								"exec": [
									"pm.test(\"Return item\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{warehouseUrl}}/{{apiPath}}/warehouse/{{orderItemUid}}",
							"host": [
								"{{warehouseUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"warehouse",
								"{{orderItemUid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Order service",
			"item": [
				{
					"name": "[order] Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa974e56-277d-4b56-a833-76d99568251f",
								"exec": [
									"pm.test(\"Health check\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "passwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "management",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{orderUrl}}/manage/health",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"manage",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "[order] Create order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9eef0801-5d8e-465b-b9fc-f5e662d2db29",
								"exec": [
									"var uuid = require(\"uuid\");",
									"postman.setEnvironmentVariable(\"userUid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b912da8c-5d85-4b47-88bd-3fbed7ed8cf7",
								"exec": [
									"pm.test(\"Create order\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response.orderUid).to.not.empty",
									"    pm.environment.set(\"orderUid\", response.orderUid)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"Lego 8880\",\n    \"size\": \"L\"\n}"
						},
						"url": {
							"raw": "{{orderUrl}}/{{apiPath}}/orders/{{userUid}}",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"orders",
								"{{userUid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[order] User order info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a5c68be8-7e68-4f17-a23c-a818f63bd5a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e773c917-4e80-4ab0-a9e4-e3fbf2048d32",
								"exec": [
									"pm.test(\"User order info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    const response = pm.response.json();",
									"    const orderUid = pm.variables.get(\"orderUid\")",
									"    pm.expect(response.orderUid).to.eq(orderUid)",
									"    pm.expect(response.itemUid).to.not.empty",
									"    pm.expect(response.status).to.eq(\"PAID\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{orderUrl}}/{{apiPath}}/orders/{{userUid}}/{{orderUid}}",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"orders",
								"{{userUid}}",
								"{{orderUid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[order] User orders info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60dd2c68-42c6-4e8f-a154-fa1343c01218",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b040698-4cb3-4736-b164-e31323e6a2d8",
								"exec": [
									"pm.test(\"User orders info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    const response = pm.response.json();",
									"    const orderUid = pm.variables.get(\"orderUid\")",
									"    pm.expect(response.length).to.be.above(0)",
									"    var order = _.find(response, (item) => item.orderUid === orderUid)",
									"    pm.expect(order.orderUid).to.eq(orderUid)",
									"    pm.expect(order.itemUid).to.not.empty",
									"    pm.expect(order.status).to.eq(\"PAID\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{orderUrl}}/{{apiPath}}/orders/{{userUid}}",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"orders",
								"{{userUid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[order] Warranty request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b675281e-97e6-41dd-9d00-ab4d4e080678",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "674bfeb7-5647-490d-9cbb-0595f36fe85c",
								"exec": [
									"pm.test(\"Warranty request\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    const response = pm.response.json();",
									"    pm.expect(response.warrantyDate).to.not.empty",
									"    pm.expect(response.decision).to.eq(\"RETURN\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"It drowned\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orderUrl}}/{{apiPath}}/orders/{{orderUid}}/warranty",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"orders",
								"{{orderUid}}",
								"warranty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[order] Return order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "431fc5a1-4fe2-47cc-ad53-80ebe4e7a7a8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a6a6d02-65e6-4c7a-b7e2-c6555d6846ba",
								"exec": [
									"pm.test(\"Return order\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{orderUrl}}/{{apiPath}}/orders/{{orderUid}}",
							"host": [
								"{{orderUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"orders",
								"{{orderUid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "54f08b1d-13ce-4835-8a7f-51c163af2337",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "82b57db4-ab43-43ca-bec6-f2f1512f0948",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Store service",
			"item": [
				{
					"name": "[store] Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0f83dca-41f1-4e5a-a6b8-76ac4e6f3363",
								"exec": [
									"pm.test(\"Health check\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "passwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "management",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{storeUrl}}/manage/health",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"manage",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "[store] Purchase item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "351d3d5b-ec39-44fa-a129-1c5e27b557b6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03b1d327-32b2-4e70-8e1b-a02c06296af5",
								"exec": [
									"pm.test(\"Purchase item\", function() {",
									"    pm.response.to.have.status(201)",
									"    var location = pm.response.headers.get(\"Location\")",
									"    pm.expect(location).to.not.empty;",
									"    var orderUid = location.split(\"/\").pop()",
									"    pm.environment.set(\"orderUid\", orderUid)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"Lego 8880\",\n    \"size\": \"L\"\n}"
						},
						"url": {
							"raw": "{{storeUrl}}/{{apiPath}}/store/{{mainUserUid}}/purchase",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"store",
								"{{mainUserUid}}",
								"purchase"
							]
						}
					},
					"response": []
				},
				{
					"name": "[store] User order info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80a7b373-4dfd-4d68-b3cd-4cbe72aa94dc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2de3fd5-4955-4221-a560-b6de068a32a1",
								"exec": [
									"pm.test(\"User order info\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    const orderUid = pm.variables.get(\"orderUid\")",
									"    ",
									"    pm.expect(response.orderUid).to.eq(orderUid)",
									"    pm.expect(response.date).to.not.empty",
									"    pm.expect(response.model).to.eq(\"Lego 8880\")",
									"    pm.expect(response.size).to.eq(\"L\")",
									"    pm.expect(response.warrantyDate).to.not.empty",
									"    pm.expect(response.warrantyStatus).to.eq(\"ON_WARRANTY\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{storeUrl}}/{{apiPath}}/store/{{mainUserUid}}/{{orderUid}}",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"store",
								"{{mainUserUid}}",
								"{{orderUid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[store] User orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9a4a807f-aa2a-4e03-b6de-4486833d2e95",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "22d6af19-ea59-4120-8ef0-1a934a94f754",
								"exec": [
									"pm.test(\"User orders\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.greaterThan(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{storeUrl}}/{{apiPath}}/store/{{mainUserUid}}/orders",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"store",
								"{{mainUserUid}}",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "[store] Warranty request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b1265b3e-d89b-4ac7-bb4c-d7460e46ab4b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cdc8e1b4-ce31-44f2-85b1-25cc95c5d424",
								"exec": [
									"pm.test(\"Warranty request\", function() {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    const orderUid = pm.variables.get(\"orderUid\")",
									"    ",
									"    pm.expect(response.orderUid).to.eq(orderUid)",
									"    pm.expect(response.warrantyDate).to.not.empty",
									"    pm.expect(response.decision).to.eq(\"RETURN\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"It drowned\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{storeUrl}}/{{apiPath}}/store/{{mainUserUid}}/{{orderUid}}/warranty",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"store",
								"{{mainUserUid}}",
								"{{orderUid}}",
								"warranty"
							]
						}
					},
					"response": []
				},
				{
					"name": "[store] Return order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3c85975-331a-47e9-8ae0-9b5456feb8ce",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "363474c7-7c9b-4696-b10a-e857789be766",
								"exec": [
									"pm.test(\"Return order\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{storeUrl}}/{{apiPath}}/store/{{mainUserUid}}/{{orderUid}}/refund",
							"host": [
								"{{storeUrl}}"
							],
							"path": [
								"{{apiPath}}",
								"store",
								"{{mainUserUid}}",
								"{{orderUid}}",
								"refund"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}